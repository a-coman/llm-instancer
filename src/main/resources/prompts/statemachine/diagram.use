model StateMachine

class NamedElement
attributes
    name : String
end

class State < NamedElement
end

class StateMachine < NamedElement
end

class Transition < NamedElement
end

class TimeEvent
attributes
    time : Integer
end

composition StateMachineContainsStates between
    StateMachine [1] role containedIn
    State [0..*] role containsStates
end

association StateMachineStartsStates between
    StateMachine [1] role startedIn
    State [1] role start
end


composition StateMachineContainsTransitions between
    StateMachine [1]
    Transition [0..*] role containsTransitions
end

composition TransitionEvents between
    Transition [1] 
    TimeEvent [1] role timer
end

association StateTransition between
    State [1] role source
    Transition [0..*] role outgoing
end

association TransitionState between
    Transition [0..*] role incoming
    State [1] role target
end

constraints
context TimeEvent inv TimeIsPositive:
    self.time > 0

context State inv EachStateHasOneOutgoingTransition:
    self.outgoing -> size() = 1

context StateMachine inv FirstCharLowerCase:
    self.containsStates -> forAll(s : State | s.name.at(1) = s.name.at(1).toLowerCase())