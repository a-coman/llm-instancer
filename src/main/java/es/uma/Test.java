package es.uma;

import dev.langchain4j.model.chat.ChatLanguageModel;
import dev.langchain4j.model.openai.OpenAiChatModel;
import dev.langchain4j.service.AiServices;
import dev.langchain4j.service.SystemMessage;

public class Test {

    interface ITestAgent {
        String system = """
                You are tasked with creating a 2D diagram in Python based on a provided instance of components, their positions, connections, and relationships. Follow these requirements carefully:
                - Represent each component as a colored bullet point corresponding to its type or label.
                - Label each bullet point with its name or identifier, displayed near the bullet.
                - Draw conveyors between components to indicate connections (as defined in the instance).
                - The color of the conveyors must match the color of the starting bullet point.
                - If conveyors overlap shift them introducing an perpendicular offset gap (its okey if they do not longer connect with the points).
                - Include an x-axis and y-axis to represent the positions of components. 
                - Scale the axis accordingly to ensure full visibility of the diagram.
                - Use grid lines to make it easier to read the positions of component.
                - The bulletpoints and arrows/conveyors should be small.
                """;
        @SystemMessage(system)
        String chat(String message);
    }

    public static void main(String[] args) {
        // Initialize the agents
        ChatLanguageModel chatGPT = OpenAiChatModel.builder()
            .apiKey(System.getenv("OPEN_API_KEY"))
            .modelName("gpt-4o")
            .build();

        ITestAgent agent = AiServices.builder(ITestAgent.class)
            .chatLanguageModel(chatGPT)
            .build();
        
        //#region message
        String message = """
                Lets start with this one:

                ### Instance 1: Basic Assembly Line

                #### Elements

                1. **HandleGenerator1**
                - x: 10
                - y: 20
                - processingTime: 5
                - counter: 100
                - **Purpose**: Produces handles for the assembly line.

                2. **HeadGenerator1**
                - x: 15
                - y: 25
                - processingTime: 6
                - counter: 100
                - **Purpose**: Produces heads for the assembly line.

                3. **Assembler1**
                - x: 20
                - y: 30
                - processingTime: 8
                - **Purpose**: Combines handles and heads to assemble hammers.

                4. **Polisher1**
                - x: 25
                - y: 35
                - processingTime: 4
                - **Purpose**: Polishes the assembled hammers.

                5. **Tray1**
                - x: 12
                - y: 22
                - capacity: 50
                - **Purpose**: Holds handles generated by HandleGenerator1.

                6. **Tray2**
                - x: 17
                - y: 27
                - capacity: 50
                - **Purpose**: Holds heads generated by HeadGenerator1.

                7. **Tray3**
                - x: 22
                - y: 32
                - capacity: 50
                - **Purpose**: Holds hammers assembled by Assembler1.

                8. **Tray4**
                - x: 27
                - y: 37
                - capacity: 50
                - **Purpose**: Holds polished hammers from Polisher1.

                #### Pieces

                1. **Head1**
                - **Purpose**: Represents a head component produced by HeadGenerator1.

                2. **Handle1**
                - **Purpose**: Represents a handle component produced by HandleGenerator1.

                3. **Hammer1**
                - isPolished: False
                - **Purpose**: Represents a hammer assembled by Assembler1.

                4. **Hammer2**
                - isPolished: True
                - **Purpose**: Represents a polished hammer from Polisher1.

                #### Relationships

                1. **Output from HandleGenerator1 to Tray1**
                - **Input**: HandleGenerator1
                - **Output**: Tray1

                2. **Output from HeadGenerator1 to Tray2**
                - **Input**: HeadGenerator1
                - **Output**: Tray2

                3. **Input to Assembler1**
                - **Input**: Tray1 (Handles), Tray2 (Heads)
                - **Output**: Tray3 (Hammers)

                4. **Input to Polisher1**
                - **Input**: Tray3 (Hammers)
                - **Output**: Tray4 (Polished Hammers)

                5. **Content of Tray1**
                - **Tray**: Tray1
                - **Pieces**: Handle1

                6. **Content of Tray2**
                - **Tray**: Tray2
                - **Pieces**: Head1

                7. **Content of Tray3**
                - **Tray**: Tray3
                - **Pieces**: Hammer1

                8. **Content of Tray4**
                - **Tray**: Tray4
                - **Pieces**: Hammer2
                """;
        //#endregion

        System.out.println(agent.chat(message));
    }
}
